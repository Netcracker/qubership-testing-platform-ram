---

# This workflow is used to build and publish a Maven project to a Maven repository (GitHub packages or Maven Central).
# It has a dry run stage to check the build process without actually publishing the artifacts.
# The workflow is triggered manually and allows the user to specify the version type (major, minor, patch), Maven profile, and additional Maven arguments.
# The workflow also creates a GitHub release after the deployment stage if the deployment is successful.
# The workflow uses the `netcracker/qubership-workflow-hub/actions/maven-release` action to perform the build and publish steps.
# The workflow requires the following inputs:
# - `version-type`: The type of version to release (major, minor, patch).
# - `maven-args`: Additional Maven arguments to pass (e.g. -DskipTests=true -Dmaven.javadoc.skip=true).
# - `profile`: The Maven profile to use (e.g. github, central).
# Please make sure to set the required secrets in your GitHub repository:
# - `GITHUB_TOKEN`: The GitHub token used for authentication.
# - `GPG_PRIVATE_KEY`: The GPG private key used for signing the artifacts.
# - `GPG_PASSPHRASE`: The passphrase for the GPG private key.
# - `MAVEN_USER`: The Maven username used for authentication (for Maven Central).
# - `MAVEN_PASSWORD`: The Maven password used for authentication (for Maven Central).
# - `GH_BUMP_VERSION_APP_ID`: The GitHub App ID used for authentication.
# - `GH_BUMP_VERSION_APP_KEY`: The private key for the GitHub App used for authentication.
# The workflow also requires the https://github.com/Netcracker/.github/blob/main/config/examples/release-drafter-config.yml config file to create a GitHub release.
# Please prepare project's pom.xml file according to https://github.com/netcracker/qubership-workflow-hub/blob/main/docs/maven-publish-pom-preparation_doc.md
# to be able to use this workflow.

name: Maven release

run-name: ${{ github.event.inputs.version-type }} release for ${{ github.event.repository.name }}

on:
  workflow_dispatch:
    inputs:
      version-type:
        description: 'Version type to release'
        type: choice
        options:
          - 'major'
          - 'minor'
          - 'patch'
        required: true
        default: 'patch'
      profile:
        description: 'Maven profile to use'
        type: choice
        options:
          - 'github'
          - 'central'
        required: false
        default: 'central'
      mvn-args:
        description: 'Additional maven arguments to pass (e.g. -DskipTests=true -Dmaven.javadoc.skip=true)'
        required: false
        default: ''
        type: string
      build-docker:
        description: 'Build Docker image'
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  packages: write

jobs:
  dry-run-build:
    runs-on: ubuntu-latest
    steps:
      - name: "Build and Publish current SNAPSHOT (dry run)"
        uses: netcracker/qubership-workflow-hub/actions/maven-release@de43c4115d6d3b1547060e7ef2a137aa9ab60fc1 #v1.0.5
        with:
          java-version: "21"
          version-type: ${{ github.event.inputs.version-type }}
          ref: ${{ github.ref }}
          module: ${{ github.event.repository.name }}
          maven-args: ${{ inputs.mvn-args }}
          profile: ${{ inputs.profile }}
          server-id: ${{ inputs.profile }}
          token: ${{ secrets.GITHUB_TOKEN }}
          maven-user: ${{ inputs.profile == 'github' && github.actor || secrets.MAVEN_USER }}
          maven-password: ${{ inputs.profile == 'github' && secrets.GITHUB_TOKEN || secrets.MAVEN_PASSWORD }}
          gpg-private-key: ${{ secrets.MAVEN_GPG_PRIVATE_KEY }}
          gpg-passphrase: ${{ secrets.MAVEN_GPG_PASSPHRASE }}
          dry-run: 'true'
  deploy:
    needs: dry-run-build
    if: ${{ needs.dry-run-build.result == 'success' }}
    outputs:
      release-version: ${{ steps.build-and-publish.outputs.release-version }}
    runs-on: ubuntu-latest
    steps:
      - name: "Prepare app token"
        uses: actions/create-github-app-token@67018539274d69449ef7c02e8e71183d1719ab42 #v2.1.4
        id: app-token
        with:
          app-id: ${{ vars.GH_BUMP_VERSION_APP_ID }}
          private-key: ${{ secrets.GH_BUMP_VERSION_APP_KEY }}
      - name: "Build and Publish"
        id: build-and-publish

        uses: netcracker/qubership-workflow-hub/actions/maven-release@de43c4115d6d3b1547060e7ef2a137aa9ab60fc1 #v1.0.5
        with:
          java-version: "21"
          version-type: ${{ github.event.inputs.version-type }}
          ref: ${{ github.ref }}
          module: ${{ github.event.repository.name }}
          maven-args: ${{ inputs.mvn-args }}
          profile: ${{ inputs.profile }}
          server-id: ${{ inputs.profile }}
          token: ${{ steps.app-token.outputs.token }}
          maven-user: ${{ inputs.profile == 'github' && github.actor || secrets.MAVEN_USER }}
          maven-password: ${{ inputs.profile == 'github' && secrets.GITHUB_TOKEN || secrets.MAVEN_PASSWORD }}
          gpg-private-key: ${{ secrets.MAVEN_GPG_PRIVATE_KEY }}
          gpg-passphrase: ${{ secrets.MAVEN_GPG_PASSPHRASE }}
          dry-run: 'false'

      - name: Upload all Maven target directories
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: qubership-testing-platform-ram
          path: '${{ github.event.repository.name }}/**/target'

  load-docker-build-components:
    needs: [deploy]
    runs-on: ubuntu-latest
    outputs:
      component: ${{ steps.load_component.outputs.components }}
      platforms: ${{ steps.load_component.outputs.platforms }}
    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          persist-credentials: false

      - name: Load Docker Configuration
        id: load_component
        run:  |
          verify=$(cat "$GITHUB_WORKSPACE/.github/docker-build-config.json" | jq '
          def verify_structure:
          .components as $components
          | .platforms as $platforms
          | ($components | type == "array")
          and (all($components[]; has("name") and has("file") and has("context")))
          and ($platforms | type == "string");
          verify_structure
          | if . then true else false end
          ')
          if [ ${verify} == 'true' ]; then
            echo "✅ $GITHUB_WORKSPACE/.github/docker-build-config.json file is valid"
            components=$(jq -c ".components" "$GITHUB_WORKSPACE/.github/docker-build-config.json")
            platforms=$(jq -c ".platforms" "$GITHUB_WORKSPACE/.github/docker-build-config.json")
          else
            echo "❗ $GITHUB_WORKSPACE/.github/docker-build-config.json file is invalid"
            echo "❗ $GITHUB_WORKSPACE/.github/docker-build-config.json file is invalid" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
          echo "components=${components}" >> $GITHUB_OUTPUT
          echo "platforms=${platforms}" >> $GITHUB_OUTPUT

  docker-build:
    permissions:
      contents: write
      packages: write
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        component: ${{ fromJson(needs.load-docker-build-components.outputs.component) }}
    needs: [ load-docker-build-components, deploy ]
    steps:
      - name: "Docker Build"
        id: docker_build
        uses: netcracker/qubership-workflow-hub/actions/docker-action@9319676b7d20b423a2e0943a0ac08da07d615998 #v1.0.6
        with:
          ref: v${{ needs.deploy.outputs.release-version }}
          download-artifact: true
          download-artifact-path: build-context
          download-artifact-merge-multiple: 'true'
          dry-run: false
          component: ${{ toJson(matrix.component) }}
          platforms: ${{ needs.load-docker-build-components.outputs.platforms }}
        env:
          GITHUB_TOKEN: ${{ github.token }}

  github-release:
    needs: [deploy]
    if: ${{ needs.deploy.result == 'success' }}
    uses: netcracker/qubership-workflow-hub/.github/workflows/release-drafter.yml@de43c4115d6d3b1547060e7ef2a137aa9ab60fc1 #v1.0.5
    with:
      version: ${{ needs.deploy.outputs.release-version }}
      publish: true